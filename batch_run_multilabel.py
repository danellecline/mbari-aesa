#!/usr/bin/env python
__author__    = 'Danelle Cline'
__copyright__ = '2016'
__license__   = 'GPL v3'
__contact__   = 'dcline at mbari.org'
__doc__ = '''

Runs transfer learning tests on AESA images
@var __date__: Date of last svn commit
@undocumented: __doc__ parser
@status: production
@license: GPL
'''

import os
import subprocess
import util
import util_plot
import glob

if __name__ == '__main__':

  annotation_file = os.path.join(os.getcwd(),'data','annotations','M56_Annotations_v10.csv')
  options = '--num_steps 30000 --testing_percentage 30 --learning_rate .01 --skiplt50 '
  prefix = 'M56_75pad'
  model_out_dir = os.path.join(os.getcwd(), 'data/model_output_final/multilabel', prefix)

  distortion_map = {
    '--random_crop 50': 'random_crop_50',
    '--random_brightness 50': 'random_brightness_50'}

  # image directory where exemplar images are
  exemplar_dir = os.path.join(os.getcwd(),'data', 'training_images', 'exemplars')

  # image directory where cropped images are located; generated either by group or by category
  image_category_dir = os.path.join(os.getcwd(), 'data', 'training_images', prefix, 'images_category', 'cropped_images')
  image_group_dir = os.path.join(os.getcwd(), 'data', 'training_images', prefix, 'images_group', 'cropped_images')

  # This is the directory the bottleneck features are generated; bottleneck features are generated by running each image through
  # the inception model. Once these are generated, they are cached.
  bottleneck_category_dir = os.path.join(os.getcwd(), 'data', 'training_images', prefix, 'images_category', 'bottleneck')

  model_map_multilabel = {'--multilabel_category_group --image_dir {0} --bottleneck_dir {1}'.format(image_category_dir, bottleneck_category_dir): 'multilabel_category_group'}
  ''''          '--multilabel_group_feedingtype --image_dir {0} --bottleneck_dir {1}'.format(image_category_dir, bottleneck_category_dir):'multilabel_group_feedingtype',
             '--multilabel_category_group --exclude_unknown --image_dir {0} --bottleneck_dir {1}'.format(image_category_dir, bottleneck_category_dir):'multilabel_category_group_sans_unk',
             '--multilabel_category_group --exclude_partial --image_dir {0} --bottleneck_dir {1}'.format(image_category_dir, bottleneck_category_dir):'multilabel_category_group_sans_partial',
             '--multilabel_category_group --exclude_partial --exclude_unknown --image_dir {0} --bottleneck_dir {1}'.format(image_category_dir, bottleneck_category_dir):'multilabel_category_group_sans_partial_unk',
             '--multilabel_group_feedingtype --exclude_unknown --image_dir {0} --bottleneck_dir {1}'.format(image_category_dir, bottleneck_category_dir):'multilabel_group_feedingtype_sans_unk',
             '--multilabel_group_feedingtype --exclude_partial --image_dir {0} --bottleneck_dir {1}'.format(image_category_dir, bottleneck_category_dir):'multilabel_group_feedingtype_sans_partial',
             '--multilabel_group_feedingtype --exclude_partial --exclude_unknown --image_dir {0} --bottleneck_dir {1}'.format(image_category_dir, bottleneck_category_dir):'multilabel_group_feedingtype_sans_partial_unk'
  }'''

  for option_model, model_sub_dir in model_map_multilabel.iteritems():
    for option_distort, distort_sub_dir in distortion_map.iteritems():
      out_dir = '{0}/{1}/{2}'.format(model_out_dir, model_sub_dir, distort_sub_dir)
      util.ensure_dir(out_dir)
      all_options = ' --annotation_file {0} {1}'.format(annotation_file, options)
      cmd = 'python ./learn.py {0} {1} {2} --model_dir {3} --exemplar_dir {4}'.format(all_options, option_model, option_distort, out_dir, exemplar_dir)
      print(cmd)
      subproc = subprocess.Popen(cmd, env=os.environ, shell=True)
      subproc.communicate()

  util_plot.plot_metrics(model_out_dir, 'category_sans_unk')
  print 'Done'
